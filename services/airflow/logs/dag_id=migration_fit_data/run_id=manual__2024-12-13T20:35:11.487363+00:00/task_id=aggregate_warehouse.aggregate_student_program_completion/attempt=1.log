[2024-12-13T20:36:15.041+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-12-13T20:36:15.158+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: migration_fit_data.aggregate_warehouse.aggregate_student_program_completion manual__2024-12-13T20:35:11.487363+00:00 [queued]>
[2024-12-13T20:36:15.215+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: migration_fit_data.aggregate_warehouse.aggregate_student_program_completion manual__2024-12-13T20:35:11.487363+00:00 [queued]>
[2024-12-13T20:36:15.215+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 1
[2024-12-13T20:36:15.251+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): aggregate_warehouse.aggregate_student_program_completion> on 2024-12-13 20:35:11.487363+00:00
[2024-12-13T20:36:15.276+0000] {warnings.py:110} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=5990) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-12-13T20:36:15.281+0000] {standard_task_runner.py:63} INFO - Started process 6002 to run task
[2024-12-13T20:36:15.283+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'migration_fit_data', 'aggregate_warehouse.aggregate_student_program_completion', 'manual__2024-12-13T20:35:11.487363+00:00', '--job-id', '696', '--raw', '--subdir', 'DAGS_FOLDER/elt_migrate.py', '--cfg-path', '/tmp/tmp9_hbj9us']
[2024-12-13T20:36:15.287+0000] {standard_task_runner.py:91} INFO - Job 696: Subtask aggregate_warehouse.aggregate_student_program_completion
[2024-12-13T20:36:15.391+0000] {task_command.py:426} INFO - Running <TaskInstance: migration_fit_data.aggregate_warehouse.aggregate_student_program_completion manual__2024-12-13T20:35:11.487363+00:00 [running]> on host 1fe973f28a1c
[2024-12-13T20:36:15.549+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='migration_fit_data' AIRFLOW_CTX_TASK_ID='aggregate_warehouse.aggregate_student_program_completion' AIRFLOW_CTX_EXECUTION_DATE='2024-12-13T20:35:11.487363+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-12-13T20:35:11.487363+00:00'
[2024-12-13T20:36:15.553+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-12-13T20:36:15.593+0000] {hive.py:475} INFO - USE `default`
[2024-12-13T20:36:15.634+0000] {hive.py:475} INFO - CREATE NAMESPACE IF NOT EXISTS iceberg.aggr_warehouse
[2024-12-13T20:36:15.681+0000] {hive.py:475} INFO - DROP TABLE IF EXISTS iceberg.aggr_warehouse.student_program_completion
[2024-12-13T20:36:15.724+0000] {hive.py:475} INFO - 
        CREATE OR REPLACE TABLE iceberg.aggr_warehouse.student_program_completion
        USING parquet
        AS
        WITH program_requirements AS (
            SELECT
                ps.program_id,
                SUM(ps.required_credit) AS total_required_credit,
                SUM(ps.elective_credit) AS total_elective_credit
            FROM
                iceberg.warehouse.program_semester ps
            GROUP BY
                ps.program_id
        ),
        student_courses AS (
            SELECT
                s.student_id,
                ps.program_id,
                ps.program_semester_id,
                COALESCE(SUM(CASE WHEN c.category = 'required' THEN c.total_credit ELSE 0 END), 0) AS total_required_credit_registered,
                COALESCE(SUM(CASE WHEN c.category = 'elective' THEN c.total_credit ELSE 0 END), 0) AS total_elective_credit_registered,
                COALESCE(SUM(CASE WHEN c.category = 'required' AND sf.final_score >= 4 THEN c.total_credit ELSE 0 END), 0) AS total_required_credit_passed,
                COALESCE(SUM(CASE WHEN c.category = 'elective' AND sf.final_score >= 4 THEN c.total_credit ELSE 0 END), 0) AS total_elective_credit_passed
            FROM
                iceberg.warehouse.student s
            JOIN iceberg.warehouse.enroll_student es ON s.student_id = es.student_id
            JOIN iceberg.warehouse.enrollment_fact ef ON es.enrollment_id = ef.enrollment_id
            JOIN iceberg.warehouse.instruction_fact inf ON ef.instruction_id = inf.instruction_id
            JOIN iceberg.warehouse.program_semester ps ON inf.program_semester_id = ps.program_semester_id
            JOIN iceberg.warehouse.course c ON inf.course_id = c.course_id
            LEFT JOIN iceberg.warehouse.score_fact sf ON sf.instruction_id = inf.instruction_id AND sf.student_id = s.student_id
            GROUP BY
                s.student_id,
                ps.program_id,
                ps.program_semester_id
        )
        SELECT
            sc.student_id,
            s.student_name,
            sc.program_id,
            pr.total_required_credit,
            pr.total_elective_credit,
            SUM(sc.total_required_credit_registered) AS total_required_credit_registered,
            SUM(sc.total_elective_credit_registered) AS total_elective_credit_registered,
            SUM(sc.total_required_credit_passed) AS total_required_credit_passed,
            SUM(sc.total_elective_credit_passed) AS total_elective_credit_passed,
            CASE 
                WHEN SUM(sc.total_required_credit_registered) >= pr.total_required_credit
                     AND SUM(sc.total_elective_credit_registered) >= pr.total_elective_credit
                THEN 'Completed'
                ELSE 'Not Completed'
            END AS completion_status
        FROM
            student_courses sc
        JOIN program_requirements pr ON sc.program_id = pr.program_id
        GROUP BY
            sc.student_id,
            s.student_name,
            sc.program_id,
            pr.total_required_credit,
            pr.total_elective_credit;
    
[2024-12-13T20:36:16.093+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-12-13T20:36:16.094+0000] {taskinstance.py:2905} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 465, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 432, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 400, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 235, in execute
    return_value = self.execute_callable()
                   ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 252, in execute_callable
    return self.python_callable(*self.op_args, **self.op_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/tasks/fit_task.py", line 113, in aggregate_into_warehouse
    cursor.execute(FIT_AGGREGATE_TABLES[table]["create_table_command"])
  File "/home/airflow/.local/lib/python3.12/site-packages/pyhive/hive.py", line 481, in execute
    _check_status(response)
  File "/home/airflow/.local/lib/python3.12/site-packages/pyhive/hive.py", line 611, in _check_status
    raise OperationalError(response)
pyhive.exc.OperationalError: TExecuteStatementResp(status=TStatus(statusCode=3, infoMessages=["*org.apache.hive.service.cli.HiveSQLException:Error running query: [UNRESOLVED_COLUMN.WITH_SUGGESTION] org.apache.spark.sql.AnalysisException: [UNRESOLVED_COLUMN.WITH_SUGGESTION] A column or function parameter with name `s`.`student_name` cannot be resolved. Did you mean one of the following? [`sc`.`student_id`, `sc`.`program_id`, `pr`.`program_id`, `sc`.`program_semester_id`, `pr`.`total_elective_credit`].; line 39 pos 12;\n'ReplaceTableAsSelect TableSpec(Map(),Some(parquet),Map(),None,None,None,false), true, false\n:- ResolvedIdentifier org.apache.iceberg.spark.SparkCatalog@4655d923, aggr_warehouse.student_program_completion\n+- 'Aggregate [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L], [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L, sum(total_required_credit_registered#26554L) AS total_required_credit_registered#26547L, sum(total_elective_credit_registered#26555L) AS total_elective_credit_registered#26548L, sum(total_required_credit_passed#26556L) AS total_required_credit_passed#26549L, sum(total_elective_credit_passed#26557L) AS total_elective_credit_passed#26550L, CASE WHEN ((sum(total_required_credit_registered#26554L) >= total_required_credit#26552L) AND (sum(total_elective_credit_registered#26555L) >= total_elective_credit#26553L)) THEN Completed ELSE Not Completed END AS completion_status#26551]\n   +- Join Inner, (program_id#26664 = program_id#26687)\n      :- SubqueryAlias sc\n      :  +- SubqueryAlias student_courses\n      :     +- Aggregate [student_id#26563, program_id#26664, program_semester_id#26663], [student_id#26563, program_id#26664, program_semester_id#26663, coalesce(sum(CASE WHEN (category#26672 = required) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_registered#26554L, coalesce(sum(CASE WHEN (category#26672 = elective) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_registered#26555L, coalesce(sum(CASE WHEN ((category#26672 = required) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_passed#26556L, coalesce(sum(CASE WHEN ((category#26672 = elective) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_passed#26557L]\n      :        +- Join LeftOuter, ((instruction_id#26678L = instruction_id#26618L) AND (student_id#26679 = student_id#26563))\n      :           :- Join Inner, (course_id#26620L = course_id#26669L)\n      :           :  :- Join Inner, (program_semester_id#26619 = program_semester_id#26663)\n      :           :  :  :- Join Inner, (instruction_id#26596L = instruction_id#26618L)\n      :           :  :  :  :- Join Inner, (enrollment_id#26585L = enrollment_id#26595L)\n      :           :  :  :  :  :- Join Inner, (student_id#26563 = student_id#26584)\n      :           :  :  :  :  :  :- SubqueryAlias s\n      :           :  :  :  :  :  :  +- SubqueryAlias iceberg.warehouse.student\n      :           :  :  :  :  :  :     +- RelationV2[student_id#26563, student_name#26564, class_name#26565, edu_mail#26566, address_id#26567L, national_id#26568L, key_year#26569, gender#26570, student_dob#26571] iceberg.warehouse.student iceberg.warehouse.student\n      :           :  :  :  :  :  +- SubqueryAlias es\n      :           :  :  :  :  :     +- SubqueryAlias iceberg.warehouse.enroll_student\n      :           :  :  :  :  :        +- RelationV2[student_id#26584, enrollment_id#26585L, enrollment_time#26586] iceberg.warehouse.enroll_student iceberg.warehouse.enroll_student\n      :           :  :  :  :  +- SubqueryAlias ef\n      :           :  :  :  :     +- SubqueryAlias iceberg.warehouse.enrollment_fact\n      :           :  :  :  :        +- RelationV2[enrollment_id#26595L, instruction_id#26596L, enrollment_start_time#26597, enrollment_end_time#26598, enrollment_class#26599, enrollment_status#26600, last_modified_date#26601, etl_date#26602] iceberg.warehouse.enrollment_fact iceberg.warehouse.enrollment_fact\n      :           :  :  :  +- SubqueryAlias inf\n      :           :  :  :     +- SubqueryAlias iceberg.warehouse.instruction_fact\n      :           :  :  :        +- RelationV2[instruction_id#26618L, program_semester_id#26619, course_id#26620L, class_id#26621L, is_required#26622, num_student#26623L, num_pass_student#26624L, num_fail_student#26625L, avg_final_score#26626, instruction_status#26627, instruction_allocate#26628, instruction_time_start#26629, instruction_time_end#26630, last_modified_date#26631, etl_date#26632] iceberg.warehouse.instruction_fact iceberg.warehouse.instruction_fact\n      :           :  :  +- SubqueryAlias ps\n      :           :  :     +- SubqueryAlias iceberg.warehouse.program_semester\n      :           :  :        +- RelationV2[program_semester_id#26663, program_id#26664, semester_name#26665, total_credit#26666L, required_credit#26667L, elective_credit#26668L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n      :           :  +- SubqueryAlias c\n      :           :     +- SubqueryAlias iceberg.warehouse.course\n      :           :        +- RelationV2[course_id#26669L, course_name#26670, course_code#26671L, category#26672, total_credit#26673L, theory_credit#26674L, practice_credit#26675L, self_learning_credit#26676L] iceberg.warehouse.course iceberg.warehouse.course\n      :           +- SubqueryAlias sf\n      :              +- SubqueryAlias iceberg.warehouse.score_fact\n      :                 +- RelationV2[score_id#26677L, instruction_id#26678L, student_id#26679, final_score#26680, final_score_4#26681, academic_rank#26682, is_practice#26683, last_modified_date#26684, etl_date#26685] iceberg.warehouse.score_fact iceberg.warehouse.score_fact\n      +- SubqueryAlias pr\n         +- SubqueryAlias program_requirements\n            +- Aggregate [program_id#26687], [program_id#26687, sum(required_credit#26690L) AS total_required_credit#26552L, sum(elective_credit#26691L) AS total_elective_credit#26553L]\n               +- SubqueryAlias ps\n                  +- SubqueryAlias iceberg.warehouse.program_semester\n                     +- RelationV2[program_semester_id#26686, program_id#26687, semester_name#26688, total_credit#26689L, required_credit#26690L, elective_credit#26691L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n:36:35", 'org.apache.spark.sql.hive.thriftserver.HiveThriftServerErrors$:runningQueryError:HiveThriftServerErrors.scala:43', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:org$apache$spark$sql$hive$thriftserver$SparkExecuteStatementOperation$$execute:SparkExecuteStatementOperation.scala:262', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:runInternal:SparkExecuteStatementOperation.scala:152', 'org.apache.hive.service.cli.operation.Operation:run:Operation.java:277', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:org$apache$spark$sql$hive$thriftserver$SparkOperation$$super$run:SparkExecuteStatementOperation.scala:41', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:$anonfun$run$1:SparkOperation.scala:45', 'scala.runtime.java8.JFunction0$mcV$sp:apply:JFunction0$mcV$sp.java:23', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:withLocalProperties:SparkOperation.scala:79', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:withLocalProperties$:SparkOperation.scala:63', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:withLocalProperties:SparkExecuteStatementOperation.scala:41', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:run:SparkOperation.scala:45', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:run$:SparkOperation.scala:43', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:run:SparkExecuteStatementOperation.scala:41', 'org.apache.hive.service.cli.session.HiveSessionImpl:executeStatementInternal:HiveSessionImpl.java:484', 'org.apache.hive.service.cli.session.HiveSessionImpl:executeStatement:HiveSessionImpl.java:460', 'jdk.internal.reflect.GeneratedMethodAccessor20:invoke::-1', 'jdk.internal.reflect.DelegatingMethodAccessorImpl:invoke::-1', 'java.lang.reflect.Method:invoke::-1', 'org.apache.hive.service.cli.session.HiveSessionProxy:invoke:HiveSessionProxy.java:71', 'org.apache.hive.service.cli.session.HiveSessionProxy:lambda$invoke$0:HiveSessionProxy.java:58', 'java.security.AccessController:doPrivileged::-2', 'javax.security.auth.Subject:doAs::-1', 'org.apache.hadoop.security.UserGroupInformation:doAs:UserGroupInformation.java:1878', 'org.apache.hive.service.cli.session.HiveSessionProxy:invoke:HiveSessionProxy.java:58', 'com.sun.proxy.$Proxy39:executeStatement::-1', 'org.apache.hive.service.cli.CLIService:executeStatement:CLIService.java:282', 'org.apache.hive.service.cli.thrift.ThriftCLIService:ExecuteStatement:ThriftCLIService.java:453', 'org.apache.hive.service.rpc.thrift.TCLIService$Processor$ExecuteStatement:getResult:TCLIService.java:1557', 'org.apache.hive.service.rpc.thrift.TCLIService$Processor$ExecuteStatement:getResult:TCLIService.java:1542', 'org.apache.thrift.ProcessFunction:process:ProcessFunction.java:38', 'org.apache.thrift.TBaseProcessor:process:TBaseProcessor.java:39', 'org.apache.hive.service.auth.TSetIpAddressProcessor:process:TSetIpAddressProcessor.java:52', 'org.apache.thrift.server.TThreadPoolServer$WorkerProcess:run:TThreadPoolServer.java:310', 'java.util.concurrent.ThreadPoolExecutor:runWorker::-1', 'java.util.concurrent.ThreadPoolExecutor$Worker:run::-1', 'java.lang.Thread:run::-1', "*org.apache.spark.sql.catalyst.ExtendedAnalysisException:[UNRESOLVED_COLUMN.WITH_SUGGESTION] A column or function parameter with name `s`.`student_name` cannot be resolved. Did you mean one of the following? [`sc`.`student_id`, `sc`.`program_id`, `pr`.`program_id`, `sc`.`program_semester_id`, `pr`.`total_elective_credit`].; line 39 pos 12;\n'ReplaceTableAsSelect TableSpec(Map(),Some(parquet),Map(),None,None,None,false), true, false\n:- ResolvedIdentifier org.apache.iceberg.spark.SparkCatalog@4655d923, aggr_warehouse.student_program_completion\n+- 'Aggregate [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L], [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L, sum(total_required_credit_registered#26554L) AS total_required_credit_registered#26547L, sum(total_elective_credit_registered#26555L) AS total_elective_credit_registered#26548L, sum(total_required_credit_passed#26556L) AS total_required_credit_passed#26549L, sum(total_elective_credit_passed#26557L) AS total_elective_credit_passed#26550L, CASE WHEN ((sum(total_required_credit_registered#26554L) >= total_required_credit#26552L) AND (sum(total_elective_credit_registered#26555L) >= total_elective_credit#26553L)) THEN Completed ELSE Not Completed END AS completion_status#26551]\n   +- Join Inner, (program_id#26664 = program_id#26687)\n      :- SubqueryAlias sc\n      :  +- SubqueryAlias student_courses\n      :     +- Aggregate [student_id#26563, program_id#26664, program_semester_id#26663], [student_id#26563, program_id#26664, program_semester_id#26663, coalesce(sum(CASE WHEN (category#26672 = required) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_registered#26554L, coalesce(sum(CASE WHEN (category#26672 = elective) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_registered#26555L, coalesce(sum(CASE WHEN ((category#26672 = required) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_passed#26556L, coalesce(sum(CASE WHEN ((category#26672 = elective) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_passed#26557L]\n      :        +- Join LeftOuter, ((instruction_id#26678L = instruction_id#26618L) AND (student_id#26679 = student_id#26563))\n      :           :- Join Inner, (course_id#26620L = course_id#26669L)\n      :           :  :- Join Inner, (program_semester_id#26619 = program_semester_id#26663)\n      :           :  :  :- Join Inner, (instruction_id#26596L = instruction_id#26618L)\n      :           :  :  :  :- Join Inner, (enrollment_id#26585L = enrollment_id#26595L)\n      :           :  :  :  :  :- Join Inner, (student_id#26563 = student_id#26584)\n      :           :  :  :  :  :  :- SubqueryAlias s\n      :           :  :  :  :  :  :  +- SubqueryAlias iceberg.warehouse.student\n      :           :  :  :  :  :  :     +- RelationV2[student_id#26563, student_name#26564, class_name#26565, edu_mail#26566, address_id#26567L, national_id#26568L, key_year#26569, gender#26570, student_dob#26571] iceberg.warehouse.student iceberg.warehouse.student\n      :           :  :  :  :  :  +- SubqueryAlias es\n      :           :  :  :  :  :     +- SubqueryAlias iceberg.warehouse.enroll_student\n      :           :  :  :  :  :        +- RelationV2[student_id#26584, enrollment_id#26585L, enrollment_time#26586] iceberg.warehouse.enroll_student iceberg.warehouse.enroll_student\n      :           :  :  :  :  +- SubqueryAlias ef\n      :           :  :  :  :     +- SubqueryAlias iceberg.warehouse.enrollment_fact\n      :           :  :  :  :        +- RelationV2[enrollment_id#26595L, instruction_id#26596L, enrollment_start_time#26597, enrollment_end_time#26598, enrollment_class#26599, enrollment_status#26600, last_modified_date#26601, etl_date#26602] iceberg.warehouse.enrollment_fact iceberg.warehouse.enrollment_fact\n      :           :  :  :  +- SubqueryAlias inf\n      :           :  :  :     +- SubqueryAlias iceberg.warehouse.instruction_fact\n      :           :  :  :        +- RelationV2[instruction_id#26618L, program_semester_id#26619, course_id#26620L, class_id#26621L, is_required#26622, num_student#26623L, num_pass_student#26624L, num_fail_student#26625L, avg_final_score#26626, instruction_status#26627, instruction_allocate#26628, instruction_time_start#26629, instruction_time_end#26630, last_modified_date#26631, etl_date#26632] iceberg.warehouse.instruction_fact iceberg.warehouse.instruction_fact\n      :           :  :  +- SubqueryAlias ps\n      :           :  :     +- SubqueryAlias iceberg.warehouse.program_semester\n      :           :  :        +- RelationV2[program_semester_id#26663, program_id#26664, semester_name#26665, total_credit#26666L, required_credit#26667L, elective_credit#26668L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n      :           :  +- SubqueryAlias c\n      :           :     +- SubqueryAlias iceberg.warehouse.course\n      :           :        +- RelationV2[course_id#26669L, course_name#26670, course_code#26671L, category#26672, total_credit#26673L, theory_credit#26674L, practice_credit#26675L, self_learning_credit#26676L] iceberg.warehouse.course iceberg.warehouse.course\n      :           +- SubqueryAlias sf\n      :              +- SubqueryAlias iceberg.warehouse.score_fact\n      :                 +- RelationV2[score_id#26677L, instruction_id#26678L, student_id#26679, final_score#26680, final_score_4#26681, academic_rank#26682, is_practice#26683, last_modified_date#26684, etl_date#26685] iceberg.warehouse.score_fact iceberg.warehouse.score_fact\n      +- SubqueryAlias pr\n         +- SubqueryAlias program_requirements\n            +- Aggregate [program_id#26687], [program_id#26687, sum(required_credit#26690L) AS total_required_credit#26552L, sum(elective_credit#26691L) AS total_elective_credit#26553L]\n               +- SubqueryAlias ps\n                  +- SubqueryAlias iceberg.warehouse.program_semester\n                     +- RelationV2[program_semester_id#26686, program_id#26687, semester_name#26688, total_credit#26689L, required_credit#26690L, elective_credit#26691L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n:78:43", 'org.apache.spark.sql.errors.QueryCompilationErrors$:unresolvedAttributeError:QueryCompilationErrors.scala:307', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:org$apache$spark$sql$catalyst$analysis$CheckAnalysis$$failUnresolvedAttribute:CheckAnalysis.scala:147', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$6:CheckAnalysis.scala:266', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$6$adapted:CheckAnalysis.scala:264', 'org.apache.spark.sql.catalyst.trees.TreeNode:foreachUp:TreeNode.scala:244', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$5:CheckAnalysis.scala:264', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$5$adapted:CheckAnalysis.scala:264', 'scala.collection.immutable.List:foreach:List.scala:431', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$2:CheckAnalysis.scala:264', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$2$adapted:CheckAnalysis.scala:182', 'org.apache.spark.sql.catalyst.trees.TreeNode:foreachUp:TreeNode.scala:244', 'org.apache.spark.sql.catalyst.trees.TreeNode:$anonfun$foreachUp$1:TreeNode.scala:243', 'org.apache.spark.sql.catalyst.trees.TreeNode:$anonfun$foreachUp$1$adapted:TreeNode.scala:243', 'scala.collection.immutable.List:foreach:List.scala:431', 'org.apache.spark.sql.catalyst.trees.TreeNode:foreachUp:TreeNode.scala:243', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:checkAnalysis0:CheckAnalysis.scala:182', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:checkAnalysis0$:CheckAnalysis.scala:164', 'org.apache.spark.sql.catalyst.analysis.Analyzer:checkAnalysis0:Analyzer.scala:188', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:checkAnalysis:CheckAnalysis.scala:160', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:checkAnalysis$:CheckAnalysis.scala:150', 'org.apache.spark.sql.catalyst.analysis.Analyzer:checkAnalysis:Analyzer.scala:188', 'org.apache.spark.sql.catalyst.analysis.Analyzer:$anonfun$executeAndCheck$1:Analyzer.scala:211', 'org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$:markInAnalyzer:AnalysisHelper.scala:330', 'org.apache.spark.sql.catalyst.analysis.Analyzer:executeAndCheck:Analyzer.scala:208', 'org.apache.spark.sql.execution.QueryExecution:$anonfun$analyzed$1:QueryExecution.scala:77', 'org.apache.spark.sql.catalyst.QueryPlanningTracker:measurePhase:QueryPlanningTracker.scala:138', 'org.apache.spark.sql.execution.QueryExecution:$anonfun$executePhase$2:QueryExecution.scala:219', 'org.apache.spark.sql.execution.QueryExecution$:withInternalError:QueryExecution.scala:546', 'org.apache.spark.sql.execution.QueryExecution:$anonfun$executePhase$1:QueryExecution.scala:219', 'org.apache.spark.sql.SparkSession:withActive:SparkSession.scala:900', 'org.apache.spark.sql.execution.QueryExecution:executePhase:QueryExecution.scala:218', 'org.apache.spark.sql.execution.QueryExecution:analyzed$lzycompute:QueryExecution.scala:77', 'org.apache.spark.sql.execution.QueryExecution:analyzed:QueryExecution.scala:74', 'org.apache.spark.sql.execution.QueryExecution:assertAnalyzed:QueryExecution.scala:66', 'org.apache.spark.sql.Dataset$:$anonfun$ofRows$2:Dataset.scala:99', 'org.apache.spark.sql.SparkSession:withActive:SparkSession.scala:900', 'org.apache.spark.sql.Dataset$:ofRows:Dataset.scala:97', 'org.apache.spark.sql.SparkSession:$anonfun$sql$4:SparkSession.scala:691', 'org.apache.spark.sql.SparkSession:withActive:SparkSession.scala:900', 'org.apache.spark.sql.SparkSession:sql:SparkSession.scala:682', 'org.apache.spark.sql.SparkSession:sql:SparkSession.scala:713', 'org.apache.spark.sql.SparkSession:sql:SparkSession.scala:744', 'org.apache.spark.sql.SQLContext:sql:SQLContext.scala:651', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:org$apache$spark$sql$hive$thriftserver$SparkExecuteStatementOperation$$execute:SparkExecuteStatementOperation.scala:227'], sqlState='42703', errorCode=0, errorMessage="Error running query: [UNRESOLVED_COLUMN.WITH_SUGGESTION] org.apache.spark.sql.AnalysisException: [UNRESOLVED_COLUMN.WITH_SUGGESTION] A column or function parameter with name `s`.`student_name` cannot be resolved. Did you mean one of the following? [`sc`.`student_id`, `sc`.`program_id`, `pr`.`program_id`, `sc`.`program_semester_id`, `pr`.`total_elective_credit`].; line 39 pos 12;\n'ReplaceTableAsSelect TableSpec(Map(),Some(parquet),Map(),None,None,None,false), true, false\n:- ResolvedIdentifier org.apache.iceberg.spark.SparkCatalog@4655d923, aggr_warehouse.student_program_completion\n+- 'Aggregate [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L], [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L, sum(total_required_credit_registered#26554L) AS total_required_credit_registered#26547L, sum(total_elective_credit_registered#26555L) AS total_elective_credit_registered#26548L, sum(total_required_credit_passed#26556L) AS total_required_credit_passed#26549L, sum(total_elective_credit_passed#26557L) AS total_elective_credit_passed#26550L, CASE WHEN ((sum(total_required_credit_registered#26554L) >= total_required_credit#26552L) AND (sum(total_elective_credit_registered#26555L) >= total_elective_credit#26553L)) THEN Completed ELSE Not Completed END AS completion_status#26551]\n   +- Join Inner, (program_id#26664 = program_id#26687)\n      :- SubqueryAlias sc\n      :  +- SubqueryAlias student_courses\n      :     +- Aggregate [student_id#26563, program_id#26664, program_semester_id#26663], [student_id#26563, program_id#26664, program_semester_id#26663, coalesce(sum(CASE WHEN (category#26672 = required) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_registered#26554L, coalesce(sum(CASE WHEN (category#26672 = elective) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_registered#26555L, coalesce(sum(CASE WHEN ((category#26672 = required) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_passed#26556L, coalesce(sum(CASE WHEN ((category#26672 = elective) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_passed#26557L]\n      :        +- Join LeftOuter, ((instruction_id#26678L = instruction_id#26618L) AND (student_id#26679 = student_id#26563))\n      :           :- Join Inner, (course_id#26620L = course_id#26669L)\n      :           :  :- Join Inner, (program_semester_id#26619 = program_semester_id#26663)\n      :           :  :  :- Join Inner, (instruction_id#26596L = instruction_id#26618L)\n      :           :  :  :  :- Join Inner, (enrollment_id#26585L = enrollment_id#26595L)\n      :           :  :  :  :  :- Join Inner, (student_id#26563 = student_id#26584)\n      :           :  :  :  :  :  :- SubqueryAlias s\n      :           :  :  :  :  :  :  +- SubqueryAlias iceberg.warehouse.student\n      :           :  :  :  :  :  :     +- RelationV2[student_id#26563, student_name#26564, class_name#26565, edu_mail#26566, address_id#26567L, national_id#26568L, key_year#26569, gender#26570, student_dob#26571] iceberg.warehouse.student iceberg.warehouse.student\n      :           :  :  :  :  :  +- SubqueryAlias es\n      :           :  :  :  :  :     +- SubqueryAlias iceberg.warehouse.enroll_student\n      :           :  :  :  :  :        +- RelationV2[student_id#26584, enrollment_id#26585L, enrollment_time#26586] iceberg.warehouse.enroll_student iceberg.warehouse.enroll_student\n      :           :  :  :  :  +- SubqueryAlias ef\n      :           :  :  :  :     +- SubqueryAlias iceberg.warehouse.enrollment_fact\n      :           :  :  :  :        +- RelationV2[enrollment_id#26595L, instruction_id#26596L, enrollment_start_time#26597, enrollment_end_time#26598, enrollment_class#26599, enrollment_status#26600, last_modified_date#26601, etl_date#26602] iceberg.warehouse.enrollment_fact iceberg.warehouse.enrollment_fact\n      :           :  :  :  +- SubqueryAlias inf\n      :           :  :  :     +- SubqueryAlias iceberg.warehouse.instruction_fact\n      :           :  :  :        +- RelationV2[instruction_id#26618L, program_semester_id#26619, course_id#26620L, class_id#26621L, is_required#26622, num_student#26623L, num_pass_student#26624L, num_fail_student#26625L, avg_final_score#26626, instruction_status#26627, instruction_allocate#26628, instruction_time_start#26629, instruction_time_end#26630, last_modified_date#26631, etl_date#26632] iceberg.warehouse.instruction_fact iceberg.warehouse.instruction_fact\n      :           :  :  +- SubqueryAlias ps\n      :           :  :     +- SubqueryAlias iceberg.warehouse.program_semester\n      :           :  :        +- RelationV2[program_semester_id#26663, program_id#26664, semester_name#26665, total_credit#26666L, required_credit#26667L, elective_credit#26668L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n      :           :  +- SubqueryAlias c\n      :           :     +- SubqueryAlias iceberg.warehouse.course\n      :           :        +- RelationV2[course_id#26669L, course_name#26670, course_code#26671L, category#26672, total_credit#26673L, theory_credit#26674L, practice_credit#26675L, self_learning_credit#26676L] iceberg.warehouse.course iceberg.warehouse.course\n      :           +- SubqueryAlias sf\n      :              +- SubqueryAlias iceberg.warehouse.score_fact\n      :                 +- RelationV2[score_id#26677L, instruction_id#26678L, student_id#26679, final_score#26680, final_score_4#26681, academic_rank#26682, is_practice#26683, last_modified_date#26684, etl_date#26685] iceberg.warehouse.score_fact iceberg.warehouse.score_fact\n      +- SubqueryAlias pr\n         +- SubqueryAlias program_requirements\n            +- Aggregate [program_id#26687], [program_id#26687, sum(required_credit#26690L) AS total_required_credit#26552L, sum(elective_credit#26691L) AS total_elective_credit#26553L]\n               +- SubqueryAlias ps\n                  +- SubqueryAlias iceberg.warehouse.program_semester\n                     +- RelationV2[program_semester_id#26686, program_id#26687, semester_name#26688, total_credit#26689L, required_credit#26690L, elective_credit#26691L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n"), operationHandle=None)
[2024-12-13T20:36:16.109+0000] {taskinstance.py:1206} INFO - Marking task as FAILED. dag_id=migration_fit_data, task_id=aggregate_warehouse.aggregate_student_program_completion, run_id=manual__2024-12-13T20:35:11.487363+00:00, execution_date=20241213T203511, start_date=20241213T203615, end_date=20241213T203616
[2024-12-13T20:36:16.131+0000] {standard_task_runner.py:110} ERROR - Failed to execute job 696 for task aggregate_warehouse.aggregate_student_program_completion (TExecuteStatementResp(status=TStatus(statusCode=3, infoMessages=["*org.apache.hive.service.cli.HiveSQLException:Error running query: [UNRESOLVED_COLUMN.WITH_SUGGESTION] org.apache.spark.sql.AnalysisException: [UNRESOLVED_COLUMN.WITH_SUGGESTION] A column or function parameter with name `s`.`student_name` cannot be resolved. Did you mean one of the following? [`sc`.`student_id`, `sc`.`program_id`, `pr`.`program_id`, `sc`.`program_semester_id`, `pr`.`total_elective_credit`].; line 39 pos 12;\n'ReplaceTableAsSelect TableSpec(Map(),Some(parquet),Map(),None,None,None,false), true, false\n:- ResolvedIdentifier org.apache.iceberg.spark.SparkCatalog@4655d923, aggr_warehouse.student_program_completion\n+- 'Aggregate [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L], [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L, sum(total_required_credit_registered#26554L) AS total_required_credit_registered#26547L, sum(total_elective_credit_registered#26555L) AS total_elective_credit_registered#26548L, sum(total_required_credit_passed#26556L) AS total_required_credit_passed#26549L, sum(total_elective_credit_passed#26557L) AS total_elective_credit_passed#26550L, CASE WHEN ((sum(total_required_credit_registered#26554L) >= total_required_credit#26552L) AND (sum(total_elective_credit_registered#26555L) >= total_elective_credit#26553L)) THEN Completed ELSE Not Completed END AS completion_status#26551]\n   +- Join Inner, (program_id#26664 = program_id#26687)\n      :- SubqueryAlias sc\n      :  +- SubqueryAlias student_courses\n      :     +- Aggregate [student_id#26563, program_id#26664, program_semester_id#26663], [student_id#26563, program_id#26664, program_semester_id#26663, coalesce(sum(CASE WHEN (category#26672 = required) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_registered#26554L, coalesce(sum(CASE WHEN (category#26672 = elective) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_registered#26555L, coalesce(sum(CASE WHEN ((category#26672 = required) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_passed#26556L, coalesce(sum(CASE WHEN ((category#26672 = elective) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_passed#26557L]\n      :        +- Join LeftOuter, ((instruction_id#26678L = instruction_id#26618L) AND (student_id#26679 = student_id#26563))\n      :           :- Join Inner, (course_id#26620L = course_id#26669L)\n      :           :  :- Join Inner, (program_semester_id#26619 = program_semester_id#26663)\n      :           :  :  :- Join Inner, (instruction_id#26596L = instruction_id#26618L)\n      :           :  :  :  :- Join Inner, (enrollment_id#26585L = enrollment_id#26595L)\n      :           :  :  :  :  :- Join Inner, (student_id#26563 = student_id#26584)\n      :           :  :  :  :  :  :- SubqueryAlias s\n      :           :  :  :  :  :  :  +- SubqueryAlias iceberg.warehouse.student\n      :           :  :  :  :  :  :     +- RelationV2[student_id#26563, student_name#26564, class_name#26565, edu_mail#26566, address_id#26567L, national_id#26568L, key_year#26569, gender#26570, student_dob#26571] iceberg.warehouse.student iceberg.warehouse.student\n      :           :  :  :  :  :  +- SubqueryAlias es\n      :           :  :  :  :  :     +- SubqueryAlias iceberg.warehouse.enroll_student\n      :           :  :  :  :  :        +- RelationV2[student_id#26584, enrollment_id#26585L, enrollment_time#26586] iceberg.warehouse.enroll_student iceberg.warehouse.enroll_student\n      :           :  :  :  :  +- SubqueryAlias ef\n      :           :  :  :  :     +- SubqueryAlias iceberg.warehouse.enrollment_fact\n      :           :  :  :  :        +- RelationV2[enrollment_id#26595L, instruction_id#26596L, enrollment_start_time#26597, enrollment_end_time#26598, enrollment_class#26599, enrollment_status#26600, last_modified_date#26601, etl_date#26602] iceberg.warehouse.enrollment_fact iceberg.warehouse.enrollment_fact\n      :           :  :  :  +- SubqueryAlias inf\n      :           :  :  :     +- SubqueryAlias iceberg.warehouse.instruction_fact\n      :           :  :  :        +- RelationV2[instruction_id#26618L, program_semester_id#26619, course_id#26620L, class_id#26621L, is_required#26622, num_student#26623L, num_pass_student#26624L, num_fail_student#26625L, avg_final_score#26626, instruction_status#26627, instruction_allocate#26628, instruction_time_start#26629, instruction_time_end#26630, last_modified_date#26631, etl_date#26632] iceberg.warehouse.instruction_fact iceberg.warehouse.instruction_fact\n      :           :  :  +- SubqueryAlias ps\n      :           :  :     +- SubqueryAlias iceberg.warehouse.program_semester\n      :           :  :        +- RelationV2[program_semester_id#26663, program_id#26664, semester_name#26665, total_credit#26666L, required_credit#26667L, elective_credit#26668L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n      :           :  +- SubqueryAlias c\n      :           :     +- SubqueryAlias iceberg.warehouse.course\n      :           :        +- RelationV2[course_id#26669L, course_name#26670, course_code#26671L, category#26672, total_credit#26673L, theory_credit#26674L, practice_credit#26675L, self_learning_credit#26676L] iceberg.warehouse.course iceberg.warehouse.course\n      :           +- SubqueryAlias sf\n      :              +- SubqueryAlias iceberg.warehouse.score_fact\n      :                 +- RelationV2[score_id#26677L, instruction_id#26678L, student_id#26679, final_score#26680, final_score_4#26681, academic_rank#26682, is_practice#26683, last_modified_date#26684, etl_date#26685] iceberg.warehouse.score_fact iceberg.warehouse.score_fact\n      +- SubqueryAlias pr\n         +- SubqueryAlias program_requirements\n            +- Aggregate [program_id#26687], [program_id#26687, sum(required_credit#26690L) AS total_required_credit#26552L, sum(elective_credit#26691L) AS total_elective_credit#26553L]\n               +- SubqueryAlias ps\n                  +- SubqueryAlias iceberg.warehouse.program_semester\n                     +- RelationV2[program_semester_id#26686, program_id#26687, semester_name#26688, total_credit#26689L, required_credit#26690L, elective_credit#26691L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n:36:35", 'org.apache.spark.sql.hive.thriftserver.HiveThriftServerErrors$:runningQueryError:HiveThriftServerErrors.scala:43', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:org$apache$spark$sql$hive$thriftserver$SparkExecuteStatementOperation$$execute:SparkExecuteStatementOperation.scala:262', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:runInternal:SparkExecuteStatementOperation.scala:152', 'org.apache.hive.service.cli.operation.Operation:run:Operation.java:277', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:org$apache$spark$sql$hive$thriftserver$SparkOperation$$super$run:SparkExecuteStatementOperation.scala:41', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:$anonfun$run$1:SparkOperation.scala:45', 'scala.runtime.java8.JFunction0$mcV$sp:apply:JFunction0$mcV$sp.java:23', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:withLocalProperties:SparkOperation.scala:79', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:withLocalProperties$:SparkOperation.scala:63', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:withLocalProperties:SparkExecuteStatementOperation.scala:41', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:run:SparkOperation.scala:45', 'org.apache.spark.sql.hive.thriftserver.SparkOperation:run$:SparkOperation.scala:43', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:run:SparkExecuteStatementOperation.scala:41', 'org.apache.hive.service.cli.session.HiveSessionImpl:executeStatementInternal:HiveSessionImpl.java:484', 'org.apache.hive.service.cli.session.HiveSessionImpl:executeStatement:HiveSessionImpl.java:460', 'jdk.internal.reflect.GeneratedMethodAccessor20:invoke::-1', 'jdk.internal.reflect.DelegatingMethodAccessorImpl:invoke::-1', 'java.lang.reflect.Method:invoke::-1', 'org.apache.hive.service.cli.session.HiveSessionProxy:invoke:HiveSessionProxy.java:71', 'org.apache.hive.service.cli.session.HiveSessionProxy:lambda$invoke$0:HiveSessionProxy.java:58', 'java.security.AccessController:doPrivileged::-2', 'javax.security.auth.Subject:doAs::-1', 'org.apache.hadoop.security.UserGroupInformation:doAs:UserGroupInformation.java:1878', 'org.apache.hive.service.cli.session.HiveSessionProxy:invoke:HiveSessionProxy.java:58', 'com.sun.proxy.$Proxy39:executeStatement::-1', 'org.apache.hive.service.cli.CLIService:executeStatement:CLIService.java:282', 'org.apache.hive.service.cli.thrift.ThriftCLIService:ExecuteStatement:ThriftCLIService.java:453', 'org.apache.hive.service.rpc.thrift.TCLIService$Processor$ExecuteStatement:getResult:TCLIService.java:1557', 'org.apache.hive.service.rpc.thrift.TCLIService$Processor$ExecuteStatement:getResult:TCLIService.java:1542', 'org.apache.thrift.ProcessFunction:process:ProcessFunction.java:38', 'org.apache.thrift.TBaseProcessor:process:TBaseProcessor.java:39', 'org.apache.hive.service.auth.TSetIpAddressProcessor:process:TSetIpAddressProcessor.java:52', 'org.apache.thrift.server.TThreadPoolServer$WorkerProcess:run:TThreadPoolServer.java:310', 'java.util.concurrent.ThreadPoolExecutor:runWorker::-1', 'java.util.concurrent.ThreadPoolExecutor$Worker:run::-1', 'java.lang.Thread:run::-1', "*org.apache.spark.sql.catalyst.ExtendedAnalysisException:[UNRESOLVED_COLUMN.WITH_SUGGESTION] A column or function parameter with name `s`.`student_name` cannot be resolved. Did you mean one of the following? [`sc`.`student_id`, `sc`.`program_id`, `pr`.`program_id`, `sc`.`program_semester_id`, `pr`.`total_elective_credit`].; line 39 pos 12;\n'ReplaceTableAsSelect TableSpec(Map(),Some(parquet),Map(),None,None,None,false), true, false\n:- ResolvedIdentifier org.apache.iceberg.spark.SparkCatalog@4655d923, aggr_warehouse.student_program_completion\n+- 'Aggregate [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L], [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L, sum(total_required_credit_registered#26554L) AS total_required_credit_registered#26547L, sum(total_elective_credit_registered#26555L) AS total_elective_credit_registered#26548L, sum(total_required_credit_passed#26556L) AS total_required_credit_passed#26549L, sum(total_elective_credit_passed#26557L) AS total_elective_credit_passed#26550L, CASE WHEN ((sum(total_required_credit_registered#26554L) >= total_required_credit#26552L) AND (sum(total_elective_credit_registered#26555L) >= total_elective_credit#26553L)) THEN Completed ELSE Not Completed END AS completion_status#26551]\n   +- Join Inner, (program_id#26664 = program_id#26687)\n      :- SubqueryAlias sc\n      :  +- SubqueryAlias student_courses\n      :     +- Aggregate [student_id#26563, program_id#26664, program_semester_id#26663], [student_id#26563, program_id#26664, program_semester_id#26663, coalesce(sum(CASE WHEN (category#26672 = required) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_registered#26554L, coalesce(sum(CASE WHEN (category#26672 = elective) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_registered#26555L, coalesce(sum(CASE WHEN ((category#26672 = required) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_passed#26556L, coalesce(sum(CASE WHEN ((category#26672 = elective) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_passed#26557L]\n      :        +- Join LeftOuter, ((instruction_id#26678L = instruction_id#26618L) AND (student_id#26679 = student_id#26563))\n      :           :- Join Inner, (course_id#26620L = course_id#26669L)\n      :           :  :- Join Inner, (program_semester_id#26619 = program_semester_id#26663)\n      :           :  :  :- Join Inner, (instruction_id#26596L = instruction_id#26618L)\n      :           :  :  :  :- Join Inner, (enrollment_id#26585L = enrollment_id#26595L)\n      :           :  :  :  :  :- Join Inner, (student_id#26563 = student_id#26584)\n      :           :  :  :  :  :  :- SubqueryAlias s\n      :           :  :  :  :  :  :  +- SubqueryAlias iceberg.warehouse.student\n      :           :  :  :  :  :  :     +- RelationV2[student_id#26563, student_name#26564, class_name#26565, edu_mail#26566, address_id#26567L, national_id#26568L, key_year#26569, gender#26570, student_dob#26571] iceberg.warehouse.student iceberg.warehouse.student\n      :           :  :  :  :  :  +- SubqueryAlias es\n      :           :  :  :  :  :     +- SubqueryAlias iceberg.warehouse.enroll_student\n      :           :  :  :  :  :        +- RelationV2[student_id#26584, enrollment_id#26585L, enrollment_time#26586] iceberg.warehouse.enroll_student iceberg.warehouse.enroll_student\n      :           :  :  :  :  +- SubqueryAlias ef\n      :           :  :  :  :     +- SubqueryAlias iceberg.warehouse.enrollment_fact\n      :           :  :  :  :        +- RelationV2[enrollment_id#26595L, instruction_id#26596L, enrollment_start_time#26597, enrollment_end_time#26598, enrollment_class#26599, enrollment_status#26600, last_modified_date#26601, etl_date#26602] iceberg.warehouse.enrollment_fact iceberg.warehouse.enrollment_fact\n      :           :  :  :  +- SubqueryAlias inf\n      :           :  :  :     +- SubqueryAlias iceberg.warehouse.instruction_fact\n      :           :  :  :        +- RelationV2[instruction_id#26618L, program_semester_id#26619, course_id#26620L, class_id#26621L, is_required#26622, num_student#26623L, num_pass_student#26624L, num_fail_student#26625L, avg_final_score#26626, instruction_status#26627, instruction_allocate#26628, instruction_time_start#26629, instruction_time_end#26630, last_modified_date#26631, etl_date#26632] iceberg.warehouse.instruction_fact iceberg.warehouse.instruction_fact\n      :           :  :  +- SubqueryAlias ps\n      :           :  :     +- SubqueryAlias iceberg.warehouse.program_semester\n      :           :  :        +- RelationV2[program_semester_id#26663, program_id#26664, semester_name#26665, total_credit#26666L, required_credit#26667L, elective_credit#26668L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n      :           :  +- SubqueryAlias c\n      :           :     +- SubqueryAlias iceberg.warehouse.course\n      :           :        +- RelationV2[course_id#26669L, course_name#26670, course_code#26671L, category#26672, total_credit#26673L, theory_credit#26674L, practice_credit#26675L, self_learning_credit#26676L] iceberg.warehouse.course iceberg.warehouse.course\n      :           +- SubqueryAlias sf\n      :              +- SubqueryAlias iceberg.warehouse.score_fact\n      :                 +- RelationV2[score_id#26677L, instruction_id#26678L, student_id#26679, final_score#26680, final_score_4#26681, academic_rank#26682, is_practice#26683, last_modified_date#26684, etl_date#26685] iceberg.warehouse.score_fact iceberg.warehouse.score_fact\n      +- SubqueryAlias pr\n         +- SubqueryAlias program_requirements\n            +- Aggregate [program_id#26687], [program_id#26687, sum(required_credit#26690L) AS total_required_credit#26552L, sum(elective_credit#26691L) AS total_elective_credit#26553L]\n               +- SubqueryAlias ps\n                  +- SubqueryAlias iceberg.warehouse.program_semester\n                     +- RelationV2[program_semester_id#26686, program_id#26687, semester_name#26688, total_credit#26689L, required_credit#26690L, elective_credit#26691L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n:78:43", 'org.apache.spark.sql.errors.QueryCompilationErrors$:unresolvedAttributeError:QueryCompilationErrors.scala:307', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:org$apache$spark$sql$catalyst$analysis$CheckAnalysis$$failUnresolvedAttribute:CheckAnalysis.scala:147', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$6:CheckAnalysis.scala:266', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$6$adapted:CheckAnalysis.scala:264', 'org.apache.spark.sql.catalyst.trees.TreeNode:foreachUp:TreeNode.scala:244', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$5:CheckAnalysis.scala:264', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$5$adapted:CheckAnalysis.scala:264', 'scala.collection.immutable.List:foreach:List.scala:431', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$2:CheckAnalysis.scala:264', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:$anonfun$checkAnalysis0$2$adapted:CheckAnalysis.scala:182', 'org.apache.spark.sql.catalyst.trees.TreeNode:foreachUp:TreeNode.scala:244', 'org.apache.spark.sql.catalyst.trees.TreeNode:$anonfun$foreachUp$1:TreeNode.scala:243', 'org.apache.spark.sql.catalyst.trees.TreeNode:$anonfun$foreachUp$1$adapted:TreeNode.scala:243', 'scala.collection.immutable.List:foreach:List.scala:431', 'org.apache.spark.sql.catalyst.trees.TreeNode:foreachUp:TreeNode.scala:243', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:checkAnalysis0:CheckAnalysis.scala:182', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:checkAnalysis0$:CheckAnalysis.scala:164', 'org.apache.spark.sql.catalyst.analysis.Analyzer:checkAnalysis0:Analyzer.scala:188', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:checkAnalysis:CheckAnalysis.scala:160', 'org.apache.spark.sql.catalyst.analysis.CheckAnalysis:checkAnalysis$:CheckAnalysis.scala:150', 'org.apache.spark.sql.catalyst.analysis.Analyzer:checkAnalysis:Analyzer.scala:188', 'org.apache.spark.sql.catalyst.analysis.Analyzer:$anonfun$executeAndCheck$1:Analyzer.scala:211', 'org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$:markInAnalyzer:AnalysisHelper.scala:330', 'org.apache.spark.sql.catalyst.analysis.Analyzer:executeAndCheck:Analyzer.scala:208', 'org.apache.spark.sql.execution.QueryExecution:$anonfun$analyzed$1:QueryExecution.scala:77', 'org.apache.spark.sql.catalyst.QueryPlanningTracker:measurePhase:QueryPlanningTracker.scala:138', 'org.apache.spark.sql.execution.QueryExecution:$anonfun$executePhase$2:QueryExecution.scala:219', 'org.apache.spark.sql.execution.QueryExecution$:withInternalError:QueryExecution.scala:546', 'org.apache.spark.sql.execution.QueryExecution:$anonfun$executePhase$1:QueryExecution.scala:219', 'org.apache.spark.sql.SparkSession:withActive:SparkSession.scala:900', 'org.apache.spark.sql.execution.QueryExecution:executePhase:QueryExecution.scala:218', 'org.apache.spark.sql.execution.QueryExecution:analyzed$lzycompute:QueryExecution.scala:77', 'org.apache.spark.sql.execution.QueryExecution:analyzed:QueryExecution.scala:74', 'org.apache.spark.sql.execution.QueryExecution:assertAnalyzed:QueryExecution.scala:66', 'org.apache.spark.sql.Dataset$:$anonfun$ofRows$2:Dataset.scala:99', 'org.apache.spark.sql.SparkSession:withActive:SparkSession.scala:900', 'org.apache.spark.sql.Dataset$:ofRows:Dataset.scala:97', 'org.apache.spark.sql.SparkSession:$anonfun$sql$4:SparkSession.scala:691', 'org.apache.spark.sql.SparkSession:withActive:SparkSession.scala:900', 'org.apache.spark.sql.SparkSession:sql:SparkSession.scala:682', 'org.apache.spark.sql.SparkSession:sql:SparkSession.scala:713', 'org.apache.spark.sql.SparkSession:sql:SparkSession.scala:744', 'org.apache.spark.sql.SQLContext:sql:SQLContext.scala:651', 'org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation:org$apache$spark$sql$hive$thriftserver$SparkExecuteStatementOperation$$execute:SparkExecuteStatementOperation.scala:227'], sqlState='42703', errorCode=0, errorMessage="Error running query: [UNRESOLVED_COLUMN.WITH_SUGGESTION] org.apache.spark.sql.AnalysisException: [UNRESOLVED_COLUMN.WITH_SUGGESTION] A column or function parameter with name `s`.`student_name` cannot be resolved. Did you mean one of the following? [`sc`.`student_id`, `sc`.`program_id`, `pr`.`program_id`, `sc`.`program_semester_id`, `pr`.`total_elective_credit`].; line 39 pos 12;\n'ReplaceTableAsSelect TableSpec(Map(),Some(parquet),Map(),None,None,None,false), true, false\n:- ResolvedIdentifier org.apache.iceberg.spark.SparkCatalog@4655d923, aggr_warehouse.student_program_completion\n+- 'Aggregate [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L], [student_id#26563, 's.student_name, program_id#26664, total_required_credit#26552L, total_elective_credit#26553L, sum(total_required_credit_registered#26554L) AS total_required_credit_registered#26547L, sum(total_elective_credit_registered#26555L) AS total_elective_credit_registered#26548L, sum(total_required_credit_passed#26556L) AS total_required_credit_passed#26549L, sum(total_elective_credit_passed#26557L) AS total_elective_credit_passed#26550L, CASE WHEN ((sum(total_required_credit_registered#26554L) >= total_required_credit#26552L) AND (sum(total_elective_credit_registered#26555L) >= total_elective_credit#26553L)) THEN Completed ELSE Not Completed END AS completion_status#26551]\n   +- Join Inner, (program_id#26664 = program_id#26687)\n      :- SubqueryAlias sc\n      :  +- SubqueryAlias student_courses\n      :     +- Aggregate [student_id#26563, program_id#26664, program_semester_id#26663], [student_id#26563, program_id#26664, program_semester_id#26663, coalesce(sum(CASE WHEN (category#26672 = required) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_registered#26554L, coalesce(sum(CASE WHEN (category#26672 = elective) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_registered#26555L, coalesce(sum(CASE WHEN ((category#26672 = required) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_required_credit_passed#26556L, coalesce(sum(CASE WHEN ((category#26672 = elective) AND (final_score#26680 >= cast(4 as double))) THEN total_credit#26673L ELSE cast(0 as bigint) END), cast(0 as bigint)) AS total_elective_credit_passed#26557L]\n      :        +- Join LeftOuter, ((instruction_id#26678L = instruction_id#26618L) AND (student_id#26679 = student_id#26563))\n      :           :- Join Inner, (course_id#26620L = course_id#26669L)\n      :           :  :- Join Inner, (program_semester_id#26619 = program_semester_id#26663)\n      :           :  :  :- Join Inner, (instruction_id#26596L = instruction_id#26618L)\n      :           :  :  :  :- Join Inner, (enrollment_id#26585L = enrollment_id#26595L)\n      :           :  :  :  :  :- Join Inner, (student_id#26563 = student_id#26584)\n      :           :  :  :  :  :  :- SubqueryAlias s\n      :           :  :  :  :  :  :  +- SubqueryAlias iceberg.warehouse.student\n      :           :  :  :  :  :  :     +- RelationV2[student_id#26563, student_name#26564, class_name#26565, edu_mail#26566, address_id#26567L, national_id#26568L, key_year#26569, gender#26570, student_dob#26571] iceberg.warehouse.student iceberg.warehouse.student\n      :           :  :  :  :  :  +- SubqueryAlias es\n      :           :  :  :  :  :     +- SubqueryAlias iceberg.warehouse.enroll_student\n      :           :  :  :  :  :        +- RelationV2[student_id#26584, enrollment_id#26585L, enrollment_time#26586] iceberg.warehouse.enroll_student iceberg.warehouse.enroll_student\n      :           :  :  :  :  +- SubqueryAlias ef\n      :           :  :  :  :     +- SubqueryAlias iceberg.warehouse.enrollment_fact\n      :           :  :  :  :        +- RelationV2[enrollment_id#26595L, instruction_id#26596L, enrollment_start_time#26597, enrollment_end_time#26598, enrollment_class#26599, enrollment_status#26600, last_modified_date#26601, etl_date#26602] iceberg.warehouse.enrollment_fact iceberg.warehouse.enrollment_fact\n      :           :  :  :  +- SubqueryAlias inf\n      :           :  :  :     +- SubqueryAlias iceberg.warehouse.instruction_fact\n      :           :  :  :        +- RelationV2[instruction_id#26618L, program_semester_id#26619, course_id#26620L, class_id#26621L, is_required#26622, num_student#26623L, num_pass_student#26624L, num_fail_student#26625L, avg_final_score#26626, instruction_status#26627, instruction_allocate#26628, instruction_time_start#26629, instruction_time_end#26630, last_modified_date#26631, etl_date#26632] iceberg.warehouse.instruction_fact iceberg.warehouse.instruction_fact\n      :           :  :  +- SubqueryAlias ps\n      :           :  :     +- SubqueryAlias iceberg.warehouse.program_semester\n      :           :  :        +- RelationV2[program_semester_id#26663, program_id#26664, semester_name#26665, total_credit#26666L, required_credit#26667L, elective_credit#26668L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n      :           :  +- SubqueryAlias c\n      :           :     +- SubqueryAlias iceberg.warehouse.course\n      :           :        +- RelationV2[course_id#26669L, course_name#26670, course_code#26671L, category#26672, total_credit#26673L, theory_credit#26674L, practice_credit#26675L, self_learning_credit#26676L] iceberg.warehouse.course iceberg.warehouse.course\n      :           +- SubqueryAlias sf\n      :              +- SubqueryAlias iceberg.warehouse.score_fact\n      :                 +- RelationV2[score_id#26677L, instruction_id#26678L, student_id#26679, final_score#26680, final_score_4#26681, academic_rank#26682, is_practice#26683, last_modified_date#26684, etl_date#26685] iceberg.warehouse.score_fact iceberg.warehouse.score_fact\n      +- SubqueryAlias pr\n         +- SubqueryAlias program_requirements\n            +- Aggregate [program_id#26687], [program_id#26687, sum(required_credit#26690L) AS total_required_credit#26552L, sum(elective_credit#26691L) AS total_elective_credit#26553L]\n               +- SubqueryAlias ps\n                  +- SubqueryAlias iceberg.warehouse.program_semester\n                     +- RelationV2[program_semester_id#26686, program_id#26687, semester_name#26688, total_credit#26689L, required_credit#26690L, elective_credit#26691L] iceberg.warehouse.program_semester iceberg.warehouse.program_semester\n"), operationHandle=None); 6002)
[2024-12-13T20:36:16.148+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 1
[2024-12-13T20:36:16.202+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-12-13T20:36:16.212+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
